#!/bin/bash
#
# updateRecipes
#
# This script updates the recipe directories 
# for the deployment script system (deploy-shell).
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Sam Caldwell.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
. $DEPLOYLIBDIR/logger

logInit "updateRecipes"
logWrite "starting..."

[ ! -z "$1" ] && [ "$1" == "help" ] && {
	cat ${ADDONSCRIPTDIR}/help/updateRecipes && echo " " && exit 1
}

[ -z "$DEPLOYRECIPEDIR" ] && logError "DEPLOYRECIPEDIR not set."

BRANCHES="master develop"
INITIAL_DIR=$(pwd)

for branch in $BRANCHES; do
	echo "updating branch: $branch"
	if [ -d "$DEPLOYRECIPEDIR/$branch" ]; then
		echo "entering branch directory for $branch"
		cd $DEPLOYRECIPEDIR/$branch
	else
		echo "No such branch exists...initializing."
		mkdir $DEPLOYRECIPEDIR/$branch
		cd $DEPLOYRECIPEDIR/$branch
		echo "pwd: $(pwd)"
		git init . &>/dev/null || { 
			echo "failed to initialize git repo"
		}
		git remote add origin git@git.samcaldwell.net:/home/git/deployShellRecipes &>/dev/null || {
			echo "failed to add remote repo."
		}
		git pull $(git remote) &>/dev/null || {
			echo "failed to pull $(git remote)"
		}
		[ "$branch" != "master" ] && {
			git checkout $branch &>/dev/null || {
				echo "failed to create $branch"
			}
		}
	fi
	echo "pulling latest code for $(git remote) $branch"
	cd $DEPLOYRECIPEDIR/$branch
	git pull $(git remote) $branch &>/dev/null || {
		echo "failed to update $(git remote) $branch"
	}
	echo " "
done
cd $INITIAL_DIR
logWrite "done."
